{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport noop from '@stdlib/utils-noop';\nimport assign from '@stdlib/object-assign';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport MAX_VALUE from '@stdlib/constants-float64-max';\nimport { factory as rhypergeom } from '@stdlib/random-base-hypergeometric';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an iterator for generating pseudorandom numbers drawn from a hypergeometric distribution.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a nonnegative integer\n* @throws {RangeError} number of draws must be less than or equal to the population size\n* @throws {RangeError} subpopulation size must be less than or equal to the population size\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterator( 10, 5, 3 );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterator( N, K, n, options ) {\n\tvar opts;\n\tvar iter;\n\tvar rand;\n\tvar FLG;\n\tvar i;\n\tif ( !isNonNegativeInteger( N ) ) {\n\t\tthrow new TypeError( format( '0pp2d,MG', N ) );\n\t}\n\tif ( !isNonNegativeInteger( K ) ) {\n\t\tthrow new TypeError( format( '0pp3X,F1', K ) );\n\t}\n\tif ( !isNonNegativeInteger( n ) ) {\n\t\tthrow new TypeError( format( '0pp2m,L9', n ) );\n\t}\n\tif ( n > N ) {\n\t\tthrow new RangeError( format( '0ppNw', n ) );\n\t}\n\tif ( K > N ) {\n\t\tthrow new RangeError( format( '0ppNx', K ) );\n\t}\n\tif ( arguments.length > 3 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( '0pp2V,FD', options ) );\n\t\t}\n\t\topts = assign( {}, options );\n\t\tif ( hasOwnProp( opts, 'iter' ) ) {\n\t\t\tif ( !isNonNegativeInteger( opts.iter ) ) {\n\t\t\t\tthrow new TypeError( format( '0pp2t,G9', 'iter', opts.iter ) );\n\t\t\t}\n\t\t} else {\n\t\t\topts.iter = MAX_VALUE;\n\t\t}\n\t\trand = rhypergeom( N, K, n, opts );\n\t\tif ( opts.prng === void 0 && opts.copy !== false ) {\n\t\t\topts.state = rand.state; // cache a copy of the PRNG state\n\t\t}\n\t} else {\n\t\trand = rhypergeom( N, K, n );\n\t\topts = {\n\t\t\t'iter': MAX_VALUE,\n\t\t\t'state': rand.state // cache a copy of the PRNG state\n\t\t};\n\t}\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t}\n\tsetReadOnly( iter, 'PRNG', rand.PRNG );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': rand(),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterator( N, K, n, opts );\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterator;\n"],"names":["iterator","N","K","n","options","opts","iter","rand","FLG","i","isNonNegativeInteger","TypeError","format","RangeError","arguments","length","isObject","assign","hasOwnProp","MAX_VALUE","rhypergeom","prng","copy","state","setReadOnly","next","end","setReadWriteAccessor","constantFunction","noop","setReadOnlyAccessor","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","PRNG","iteratorSymbol","factory","done","value","seed","seedLength","stateLength","byteLength","s"],"mappings":";;wyCA2EA,SAASA,EAAUC,EAAGC,EAAGC,EAAGC,GAC3B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAsBT,GAC3B,MAAM,IAAIU,UAAWC,EAAQ,WAAYX,IAE1C,IAAMS,EAAsBR,GAC3B,MAAM,IAAIS,UAAWC,EAAQ,WAAYV,IAE1C,IAAMQ,EAAsBP,GAC3B,MAAM,IAAIQ,UAAWC,EAAQ,WAAYT,IAE1C,GAAKA,EAAIF,EACR,MAAM,IAAIY,WAAYD,EAAQ,QAAST,IAExC,GAAKD,EAAID,EACR,MAAM,IAAIY,WAAYD,EAAQ,QAASV,IAExC,GAAKY,UAAUC,OAAS,EAAI,CAC3B,IAAMC,EAAUZ,GACf,MAAM,IAAIO,UAAWC,EAAQ,WAAYR,IAG1C,GADAC,EAAOY,EAAQ,GAAIb,GACdc,EAAYb,EAAM,SACtB,IAAMK,EAAsBL,EAAKC,MAChC,MAAM,IAAIK,UAAWC,EAAQ,WAAY,OAAQP,EAAKC,YAGvDD,EAAKC,KAAOa,EAEbZ,EAAOa,EAAYnB,EAAGC,EAAGC,EAAGE,QACT,IAAdA,EAAKgB,OAAiC,IAAdhB,EAAKiB,OACjCjB,EAAKkB,MAAQhB,EAAKgB,MAErB,MACEhB,EAAOa,EAAYnB,EAAGC,EAAGC,GACzBE,EAAO,CACNC,KAAQa,EACRI,MAAShB,EAAKgB,OA6BhB,OA1BAd,EAAI,EAIJe,EADAlB,EAAO,CAAA,EACY,OAAQmB,GAC3BD,EAAalB,EAAM,SAAUoB,GAExBrB,GAAQA,EAAKgB,MACjBG,EAAalB,EAAM,OAAQ,MAC3BkB,EAAalB,EAAM,aAAc,MACjCqB,EAAsBrB,EAAM,QAASsB,EAAkB,MAAQC,GAC/DL,EAAalB,EAAM,cAAe,MAClCkB,EAAalB,EAAM,aAAc,QAEjCwB,EAAqBxB,EAAM,OAAQyB,GACnCD,EAAqBxB,EAAM,aAAc0B,GACzCL,EAAsBrB,EAAM,QAAS2B,EAAUC,GAC/CJ,EAAqBxB,EAAM,cAAe6B,GAC1CL,EAAqBxB,EAAM,aAAc8B,IAE1CZ,EAAalB,EAAM,OAAQC,EAAK8B,MAG3BC,GACJd,EAAalB,EAAMgC,EAAgBC,GAE7BjC,EAQP,SAASmB,IAER,OADAhB,GAAK,EACAD,GAAOC,EAAIJ,EAAKC,KACb,CACNkC,MAAQ,GAGH,CACNC,MAASlC,IACTiC,MAAQ,EAET,CASD,SAASd,EAAKe,GAEb,OADAjC,GAAM,EACDM,UAAUC,OACP,CACN0B,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,EAET,CAQD,SAASD,IACR,OAAOvC,EAAUC,EAAGC,EAAGC,EAAGE,EAC1B,CAQD,SAAS0B,IACR,OAAOxB,EAAK8B,KAAKK,IACjB,CAQD,SAASV,IACR,OAAOzB,EAAK8B,KAAKM,UACjB,CAQD,SAASR,IACR,OAAO5B,EAAK8B,KAAKO,WACjB,CAQD,SAASR,IACR,OAAO7B,EAAK8B,KAAKQ,UACjB,CAQD,SAASZ,IACR,OAAO1B,EAAK8B,KAAKd,KACjB,CASD,SAASW,EAAUY,GAClBvC,EAAK8B,KAAKd,MAAQuB,CAClB,CACF"}